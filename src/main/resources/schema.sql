CREATE TABLE IF NOT EXISTS FRIENDSHIP_STATUS
(
    STATUS_ID INTEGER NOT NULL,
    NAME      CHARACTER,
    CONSTRAINT FRIENDSHIP_STATUS_PK
        PRIMARY KEY (STATUS_ID)
);
COMMENT ON TABLE FRIENDSHIP_STATUS IS 'Статус дружбы';

CREATE TABLE IF NOT EXISTS GENRE
(
    GENRE_ID INTEGER   NOT NULL,
    NAME     CHARACTER NOT NULL,
    CONSTRAINT GENRE_PK
        PRIMARY KEY (GENRE_ID)
);
COMMENT ON TABLE GENRE IS 'Жанры фильма';

CREATE TABLE IF NOT EXISTS RATE
(
    RATE_ID INTEGER   NOT NULL,
    NAME    CHARACTER NOT NULL,
    CONSTRAINT RATE_PK
        PRIMARY KEY (RATE_ID)
);
COMMENT ON TABLE RATE IS 'Информация рейтинга фильмов';

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER   not null,
    EMAIL    CHARACTER not null,
    NAME     CHARACTER,
    LOGIN    CHARACTER,
    BIRTHDAY DATE,
    CONSTRAINT USERS_PK
        PRIMARY KEY (USER_ID)
);
COMMENT ON TABLE USERS IS 'Хранилище пользователей';

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID           INTEGER NOT NULL,
    FRIEND_ID         INTEGER NOT NULL,
    FRIENDSHIP_STATUS INTEGER NOT NULL DEFAULT 2,
    CONSTRAINT FRIENDS_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT FRIENDS_FK_1
        FOREIGN KEY (FRIENDSHIP_STATUS) REFERENCES FRIENDSHIP_STATUS (STATUS_ID)
);
comment on table FRIENDS is 'Статус дружбы между пользователями';

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER   NOT NULL,
    NAME         CHARACTER NOT NULL,
    DESCRIPTION  CHARACTER,
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    RATE         INTEGER,
    USER_RATE    INTEGER,
    CONSTRAINT FILMS_PK
        PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT FILMS_FK_2
        FOREIGN KEY (RATE) REFERENCES RATE (RATE_ID)
);
COMMENT ON TABLE FILMS IS 'Содержит подробную информацию о фильмам';

CREATE TABLE IF NOT EXISTS FILMS_GENRE
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER,
    CONSTRAINT FILMS_GENRE_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT FILMS_GENRE_FK_1
        FOREIGN KEY (GENRE_ID) REFERENCES GENRE (GENRE_ID)
);
COMMENT ON TABLE FILMS_GENRE IS 'Содержит  информацию о жанрах фильмов';

CREATE TABLE IF NOT EXISTS
    LIKES
(
    FILM_ID INTEGER,
    USER_ID INTEGER,
    CONSTRAINT LIKES_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID),
    CONSTRAINT LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);
